import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'

    apply from: 'versions.gradle'
    addRepos(repositories)
    dependencies {
        classpath deps.android_gradle_plugin
        classpath deps.kotlin.plugin
        classpath deps.auto_logging.plugin
        classpath deps.bintray_plugin
        classpath deps.maven_plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
    repositories {
        google()
    }
}

plugins {
    id 'com.gladed.androidgitversion' version '0.4.10'
}

allprojects {
    addRepos(repositories)

    // Show more errors.
    allprojects {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs << "-Xmaxerrs" << "1000"
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

androidGitVersion {
    prefix 'v'
    codeFormat = 'MMNNPPRR'
    baseCode = 191011
    // 1000000
    // 191011
    // First rel version
    // 1191011
}

ext {
    thanosApplicationIdPrefix = "github.tornaco.android.thanos"
    thanosApplicationId = getCurrentFlavor() == "row" ? "${thanosApplicationIdPrefix}.pro" : "${thanosApplicationIdPrefix}"
    thanosBuildVariant = getCurrentVariant()
    thanosBuildHost = getHostName()
    println "### thanosBuildHost: ${thanosBuildHost} ###"
    println "### thanosBuildVariant: ${thanosBuildVariant} ###"
    println "### thanosApplicationId: $thanosApplicationId ###"
    lockerApplicationId = "github.tornaco.practice.honeycomb.locker"
    versionCode = androidGitVersion.code() as int
    versionName = androidGitVersion.name()

}

@SuppressWarnings("GrMethodMayBeStatic")
def getHostName() {
    return InetAddress.getLocalHost().getHostName()
}

def getCurrentVariant() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    println "tskReqStr: ${tskReqStr}"

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(2).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return ""
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}
